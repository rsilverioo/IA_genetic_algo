/*============================================================================
| (c) JOB-SCHEDULING IN MULTIPROCESSOR
============================================================================*/

#include "ga.h"

int eval_tasks();    /*--- Forward declaration ---*/
                     /*these variables can be used in any part of this program*/

#define MAXTASKS 100  /* The maximum number of tasks */
struct{
	float time,
	      mem;
} Task[MAXTASKS];

int Num_Tasks;

double Sum_Area; /* Sum of the tasks Area*/

/*----------------------------------------------------------------------------
| main()
----------------------------------------------------------------------------*/
main(argc, argv)
   int  argc;
   char *argv[];
{
   GA_Info_Ptr ga_info;

   /*--- Initialize the genetic algorithm ---*/
   printf("Reading GA config\n");
   ga_info = GA_config("jobsch.cfg", eval_tasks);
   printf("GA config read successfully\n");

   read_tasks(ga_info->user_data);
   
   ga_info->chrom_len = Num_Tasks;

if(argc > 1)
 {X_select(ga_info, argv[1]);
 };
 
 /*--- Run the GA ---*/
   printf("Running GA\n");
   GA_run(ga_info);
   printf("GA run completed\n");
   printf("Sum of packages weight = %f\n\n", Sum_Area);
}

/*----------------------------------------------------------------------------
| obj_fun() - user specified objective function
----------------------------------------------------------------------------*/
int eval_tasks(chrom) 
   Chrom_Ptr chrom;
{
   int i;
   float tot_time, max_time, tot_mem, task_time, task_mem;

/* Trivial case no tasks */
   if(chrom->length < 1)  {
	chrom->fitness = 0;
	    return;
   }

/* Initialization*/ 

tot_time = 0;
max_time = 0;
tot_mem = 0;  

/*--Place each Task using next fit Its 1-D bin Packing---- */
for(i = 0; i < chrom->length; i++)  {  
	task_time = Task[(int)chrom->gene[i]-1].time;
   	task_mem = Task[(int)chrom->gene[i]-1].mem;
  
 /* ---Place tasks on a leve----*/
   
   if(task_time + tot_time > 1.0) {       /*--Too much time---*/ 
       tot_mem = task_mem;
       tot_time += max_time;
	max_time = 0;	
      } 
	else {
	   tot_time += task_time;
	}

/*__Find the longest time at the level--*/

if(task_time > max_time) {
max_time = task_time;
}}
 
chrom->fitness = tot_time;
}

/*---------------------------------------------------------------------------------------------------
|read data from file
---------------------------------------------------------------------------------------------------*/

read_tasks(filename)
 char *filename;
{ 
  FILE *fid;
  int i;
 
  /*--open datafile----*/
  if((fid = fopen(filename,"r")) == NULL) 
  {
   printf("Errors in opening the packages datafile <%s>\n", filename);
   exit(1);
  }

  /*--get number of tasks----*/
  fscanf(fid,"%d", &Num_Tasks);
  
  if(Num_Tasks < 1 || Num_Tasks > MAXTASKS)
  {
    printf("Number of TASKS ,%d, out of bounds [1...%d]\n", Num_Tasks, MAXTASKS);
    exit(1);
  }

  /*----get the task time and the memory requirement -----*/
  Sum_Area = 0;
  for(i=0; i < Num_Tasks; i++)
  {
     fscanf(fid,"%f%f", &Task[i].time, &Task[i].mem);
     Sum_Area += Task[i].time * Task[i].mem;
  }

/*---Close the file--*/
fclose(fid);
}

